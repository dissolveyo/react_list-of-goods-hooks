{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setReversed","NONE","sortType","setSortType","visibleGoods","goods","ALPHABET","sort","LENGTH","firstGood","secondGood","length","reverse","getReorderedGoods","isSortedByAlphabet","isSortedByLength","isInitial","className","type","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAiBKA,E,0DAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAME,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EA/BD,SACLC,EADK,GAGJ,IADCH,EACF,EADEA,SAAUH,EACZ,EADYA,WAENK,EAAY,YAAOC,GAEzB,OAAQH,GACN,KAAKP,EAASW,SACZF,EAAaG,OACb,MAEF,KAAKZ,EAASa,OACZJ,EAAaG,MAAK,SAACE,EAAWC,GAC5B,OAAOD,EAAUE,OAASD,EAAWC,UAY3C,OAJIZ,GACFK,EAAaQ,UAGRR,EAOHS,CAAkBjB,EAAiB,CAAEG,aAAYG,aAC/CY,EAAqBZ,IAAaP,EAASW,SAC3CS,EAAmBb,IAAaP,EAASa,OACzCQ,GAAajB,GAAcG,IAAaP,EAASM,KAWvD,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAS,uEAGHH,EAAqB,GAAK,WAHvB,kBAKTK,QAAS,kBAAMhB,EAAYR,EAASW,WAPtC,iCAYA,wBACEY,KAAK,SACLD,UAAS,0EAGHF,EAAmB,GAAK,WAHrB,kBAKTI,QAAS,kBAAMhB,EAAYR,EAASa,SAPtC,4BAYA,wBACEU,KAAK,SACLD,UAAS,0EAGHlB,EAAa,GAAK,WAHf,kBAKToB,QA3CmB,WACzBnB,GAAY,SAAAoB,GAAO,OAAKA,MAmCpB,sBAYEJ,GACA,wBACEE,KAAK,SACLD,UAAU,4BACVE,QAhDO,WACfnB,GAAY,GACZG,EAAYR,EAASM,OA2Cf,sBAUJ,6BACGG,EAAaiB,KAAI,SAACC,GAAD,OAChB,6BAAgBA,GAAPA,YC3HnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.0b664a02.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType;\n  isReversed: boolean;\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort();\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((firstGood, secondGood) => {\n        return firstGood.length - secondGood.length;\n      });\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const visibleGoods\n    = getReorderedGoods(goodsFromServer, { isReversed, sortType });\n  const isSortedByAlphabet = sortType === SortType.ALPHABET;\n  const isSortedByLength = sortType === SortType.LENGTH;\n  const isInitial = !isReversed && sortType === SortType.NONE;\n\n  const setOppositeReverse = () => {\n    setReversed(current => !current);\n  };\n\n  const resetAll = () => {\n    setReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={`\n              button\n              is-info\n              ${isSortedByAlphabet ? '' : 'is-light'}\n            `}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`\n              button\n              is-success\n              ${isSortedByLength ? '' : 'is-light'}\n            `}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={`\n              button\n              is-warning\n              ${isReversed ? '' : 'is-light'}\n            `}\n          onClick={setOppositeReverse}\n        >\n          Reverse\n        </button>\n\n        {!isInitial && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetAll}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}